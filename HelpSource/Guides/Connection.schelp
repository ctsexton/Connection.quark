title:: Connection overview
summary:: An overview of the Connection quark
related:: Classes/Connection
categories:: Control

section::Description
Connection provides a more convient, expressive, and powerful way of connecting and synchronizing objects, values, and UI views in SuperCollider.
It is built on top of (and is compatible with) the existing link::Classes/Object#addDependant::, link::Classes/Object#removeDependant:: link::Classes/Object#changed:: etc. patterns, but provides greatly expanded functionality.

NOTE::
While Connection has some convenient methods for operating on collections of objects or methods, it is not an "automatic gui creation" library - there are much better tools for this.
Instead, it attempts to provide semantically clear operations that can be composed in obvious ways to achieve what you want. In general, individual lines of code using Connection classes and methods
express obvious relationships between objects, with little-to-no "magic" or behind-the-scenes inference of intent.
::

warning::
The Connection quark is under active development. Most API's, object names, etc. are subject to change or removal.
Please send feedback, bug reports, feature ideas to Scott Carver <scott@artificia.org>.
::

section::Introduction
SuperCollider has a built-in notification pattern that allows any object to be notified if another object changes:
code::
(
~notifier = Object();
~recipient = { "I've been notified!".postln };
~notifier.addDependant(~recipient);
~notifier.changed(\foo, "bar");
~notifier.removeDependant(~recipient);
)
::

Any dependant of ~notifier receives a call to it's code::update:: method with the arguments code::(object, changed ...args)::.
In this example, code::~notifier.changed(\foo, "bar"):: results in code::~recipient.update(~notifier, \foo, "bar")::. The "changed" argument is usually used to express EMPHASIS::what:: changed about the object, and the argument after is usually the new value or a description of that change.

This pattern is simple and powerful, but has pitfalls. When connecting up more complex objects - for example, a UI View with multiple sliders and fields - this pattern requires an extensive amount of bookkeeping.
You will potentially need to keep track of:
numberedlist::
## Every object you've STRONG::added a dependant to::.
## Every object you've STRONG::added as a dependant::.
## STRONG::Which:: objects you've added as dependants to which other objects.
::
And, it becomes verbose as you begin to deal with multiple signals interconnecting multiple objects.
Often this takes the form of a proliferation of inline functions that simply forward updates with minor changes:
code::
object.addDependant({
	|obj, change, val|
	if (change==\value) { this.onValueChanged(val) }
})
::
This is a dangerous anti-pattern: once you've added an untracked function using "this", you have effectively leaked the "this" object until you call code::object.release:: to clear it's dependants (and - if others are listening to code::object::, you'll disconnect them too!).
If you fail to disconnect STRONG::all:: of your object â†’ dependant connections, you risk creating memory leaks or continuing to send updates to objects that are no longer in use.


section::The Connection class
The core of the Connection quark is the link::Classes/Connection:: class, which encapsulates the connection between one object and one dependant:
code::
(
~notifier = Object();
~recipient = { "I've been notified!".postln };
~connection = Connection(~notifier, ~recipient);
~notifier.changed(\foo, "bar");
~connection.disconnect();
)
::
Once you have created a Connection, you can manipulate that connection generically, without needing to store or care about the specific objects it connects. It handles code::addDependant:: / code::removeDependant:: calls, and is guaranteed not to leak memory after it's disconnected and is not reachable.
This means significantly less bookkeeping for more complex sets of connections.

The canonical way to create connections is with the link::Classes/Object#-connectTo:: method - this is preferred over creating Connections directly.

code::
(
~slider = Slider();
~view = View(bounds:600@200).layout_(HLayout(~slider)).front;
~connection = ~slider.connectTo({
	|slider|
	"Slider changed: %".format(slider.value).postln;
});
~slider.action = { |v| v.changed(\value) }; // Turn your action into a .changed signal.
~view.onClose = { ~connection.free };
)
::

This is not much more efficient than simply using addDependant, and we still have lots of trivial inline functions.

SUBSECTION:: Connecting objects expressively

If we want to add 20 sliders, our code looks very similar.
code::
(
~sliders = 20.collect { Slider() };
~view = View(bounds:600@200).layout_(HLayout(*~sliders)).front;
~connections = ~sliders.collect({
	|slider, i|
	slider.action = { |v| v.changed(\value) };
	slider.connectTo({
		"Slider % changed: %".format(i, slider.value).postln;
	})
});
~view.onClose = { ~connections.do(_.free) };
)
::

The Connection quark provides several conveniences that make the above example more expressive and straightforward.

SUBSECTION:: .signal()
For our Sliders, CODE::slider.signal(\value):: will forward STRONG::only things that match:: CODE::slider.changed(\value,...)::.
In addition, Connection is smart enough to automatically add a code::slider.action:: function to turn slider actions into CODE::slider.changed(\value, slider.value)::

CODE::
(
~sliders = 20.collect { Slider() };
~view = View(bounds:600@200).layout_(HLayout(*~sliders)).front;
~connections = ~sliders.collect({
	|slider, i|
	slider.signal(\value).connectTo({
		"Slider % changed: %".format(i, slider.value).postln;
	})
});
~view.onClose = { ~connections.do(_.free) };
)
::

SUBSECTION:: ConnectionList
When managing groups of connections, we can use link::Classes/ConnectionList::. link::Classes/ConnectionList:: is a standard collection,
but forwards all common link::Classes/Connection:: methods on to each item it contains. So, rather than iterating over a collection
of Connections to free them all, you can simply use code::connectionList.free()::.

LINK::Classes/ConnectionList#*make:: will collect all Connections that are created during the execution of a function.

CODE::
(
~sliders = 20.collect { Slider() };
~view = View(bounds:600@200).layout_(HLayout(*~sliders)).front;
~connections = ConnectionList.make {
	~sliders.do {
		|slider, i|
		slider.signal(\value).connectTo({
			"Slider % changed: %".format(i, slider.value).postln;
		})
	}
};
~view.onClose = { ~connections.free };
)
::


SUBSECTION:: Connecting multiple objects
The code::Classes/Connection#-connectTo:: method can take multiple objects, and will connect all of them.
This makes it easy to create STRONG::a one-to-many connection::.
For example: code::slider.connectAll(a, b, c)::.

The link::Classes/Collection#-connectAll:: method provides a STRONG::many-to-one connection::, connecting all objects in a list to one dependant.
For example: code::~sliders.connectAll({ |slider| "Slider changed: %".format(slider.value).postln; })::

If we want to add a NumberBox for each of our sliders, we need a STRONG::many-to-many connection::.
We can use link::Classes/Collection#-connectEach:: to connect a list of objects to a list of dependants. For example:
CODE::
(
~sliders = 20.collect { Slider() };
~numbers = 20.collect { NumberBox().minWidth_(40) };
~view = View(bounds:600@200).layout_(GridLayout.rows(~sliders, ~numbers)).front;
~connections = ConnectionList.make {
	~sliders.connectEach(\value, ~numbers, _.valueSlot);
	~numbers.connectEach(\value, ~sliders, _.valueSlot);
	~sliders.connectAll({ |slider| "Slider changed: %".format(slider.value).postln; });
};
~view.onClose = { ~connections.free };
)
::

You may notice that, for CODE::connectEach::, we provide some other arguments.
The form of connectEach is CODE::objectList.connectEach(signalFunction, dependentList, slotFunction)::, which is
equivalent to:
CODE::
objectList.do {
	|obj, i|
	signalFunction.value(obj).connectTo(slotFunction.value(dependentList[i]))
};
::

In short, the two functions should take list items and provide an appropriate object or dependent to be connected.
If you specify a Symbol or a String instead, these are taken to be arguments to t objects .signal or .methodSlot methods. So, the following are equivalent:

CODE::
~sliders.connectEach(\value, ~numbers, "value_(value)");
~sliders.connectEach(_.signal(\value), ~numbers, _.methodSlot("value_(value)"));
~sliders.connectEach(\value, ~numbers, _.valueSlot);
::

See link::#Slots:: below for more information on LINK::Classes/Object#-methodSlot::.

SUBSECTION:: MVC and ControlValue's
You can see that the number of connections we have is rapidly increasing.
The model-view-controller design pattern suggests that we keep STRONG::values:: in a single place (the model),
and notify objects that display or use those values (views) when a value changes. Connection provides
a link::Classes/ControlValue:: class to store values, and transmit changes when the value changes.
We can use link::Classes/NumericControlValue:: to store our numeric values.

CODE::
(
~values = 20.collect { NumericControlValue() };
~sliders = 20.collect { Slider() };
~numbers = 20.collect { NumberBox().minWidth_(40) };
~view = View(bounds:600@200).layout_(GridLayout.rows(~sliders, ~numbers)).front;
~connections = ConnectionList.make {
	~values.connectEach(\value, ~sliders, _.valueSlot);
	~values.connectEach(\value, ~numbers, _.valueSlot);
	~sliders.connectEach(\value, ~values, _.valueSlot);
};
~view.onClose = { ~connections.free };
)
::

Note that connections are one-way - we want our sliders to be updated when our values change, but also change the values
when we move them. So, we need a connection in each direction. We only care about our number boxes displaying values, so
we can make those one-way. We can see this two-way connection in action if we animate our values:
CODE::
(
~values = 20.collect { NumericControlValue().value_(1.0.rand) };
~sliders = 20.collect { Slider() };
~numbers = 20.collect { NumberBox().minWidth_(40) };
~view = View(bounds:600@200).layout_(GridLayout.rows(~sliders, ~numbers)).front;

~connections = ConnectionList.make {
	~values.connectEach(\value, ~sliders, _.valueSlot);
	~values.connectEach(\value, ~numbers, _.valueSlot);
	~sliders.connectEach(\value, ~values, _.valueSlot);
};
~view.onClose = { ~connections.free };

// slowly animate our values
Routine({
	while {~view.notClosed} {
		~values.do {
			|v|
			v.value = (v.value + 0.005) % 1.0;
		};
		(1/30).wait;
	}
}).play(AppClock);
)
::

section::Slots
The code::valueSlot:: method above is a specific case of the more general code::methodSlot::, which allows you to forward updates to a specific method of an object.
This functionality is provided by code::Classes/MethodSlot::, which you generally create via code::object.methodSlot("methodName")::.
code::
(
~object = Object();
~dependant = (
	scored: 	{ |self, points| "Points scored: %".format(points).postln },
	touchdown: 	{ "Touchdown!".postln },
	fieldGoal:	{ "Field Goal!".postln },
);
~connections = ConnectionList.with {
	~object.signal(\scored)		.connectTo(~dependant.methodSlot("scored(value)"));
	~object.signal(\touchdown)	.connectTo(~dependant.methodSlot("touchdown"));
	~object.signal(\fieldGoal)	.connectTo(~dependant.methodSlot("fieldGoal"));
};
~object.changed(\touchdown);
~object.changed(\scored, 6);
~object.changed(\fieldGoal);
~object.changed(\scored, 3);
~connections.disconnect();
)
::
The code::methodSlot:: method can specify both a method name and the order of the arguments passed. Specifying a string argument in code::methodSlot:: is exactly equivalent to inserting that string into a function the following form (under the hood, the quark does exactly this):
code::
{
	|recipient, object, changed ...args|
	var value=args[0];
	recipient.{{methodSlot_argument}}
}
::
So, for example, when a signal like code::object.changed(\quarter, 2):: is recieved by
code::dependant.methodSlot("updateElement(changed, value)")::, the resulting call is
code::dependant.updateElement(\quarter, 2)::.

Synths and Groups have slot methods for their arguments, making it easy to map values to Synth parameters:
code::
(
~sliders = (
	amp: 	Slider(),
	freq: 	Slider(),
	delay: 	Slider(),
	decay:	Slider(),
);
~view = View(bounds:600@200).layout_(HLayout(*~sliders.values)).front;

s.waitForBoot {
	SynthDef(\connDemo, {
		|amp=1, freq=1, delay=0.2, decay=1, filterFreq=8000|
		Out.ar(0, 1 * amp * CombC.ar(LPF.ar(Impulse.ar(freq), filterFreq), 1, delay, decay*4))
	}).add;
	s.sync;
	~synth = Synth(\connDemo);
	~connections = ConnectionList.make {
		~sliders.amp.signal(\value).connectTo(~synth.argSlot(\amp));
		~sliders.freq.signal(\value).connectTo(~synth.argSlot(\freq));
		~sliders.delay.signal(\value).connectTo(~synth.argSlot(\delay));
		~sliders.decay.signal(\value).connectTo(~synth.argSlot(\decay));
	};
	~view.onClose = { ~connections.disconnect; ~synth.free; }
};
)
::


section::Control values
Of course, our sliders only range from 0..1. And, we lose their values if we close the View. The link::Classes/NumericControlValue:: class, which provides a model for a numeric value, broadcasts updates when it changes, and can be connected to other objects that are interested in it's value. This class is almost identical in functionality to the CV class from the Conductor quark.
code::
(
~controls = [
	~amp 	= NumericControlValue(spec:ControlSpec(0, 1, default:1)),
	~freq 	= NumericControlValue(spec:ControlSpec(1, 20, default:1)),
	~delay 	= NumericControlValue(spec:ControlSpec(0.05, 2, default:0.3)),
	~decay	= NumericControlValue(spec:ControlSpec(1, 8, default:5)),
	~filterFreq = NumericControlValue(spec:ControlSpec(2000, 10000, default:8000)),
];

~view = View(bounds:600@200).layout_(GridLayout.rows(
	~sliders = 5.collect { Slider() },
	~numbers = 5.collect { NumberBox() }
)).front;

~view.onClose = { ~synth.free; ~connections.disconnect };

~connections = ConnectionList.makeWith {
	~controls.connectEach(\input, ~sliders, _.valueSlot);
	~controls.connectEach(\value, ~numbers, _.valueSlot);
	~sliders.connectEach(\value, ~controls, _.inputSlot);
	~numbers.connectEach(\value, ~controls, _.valueSlot);
};

s.waitForBoot {
	s.makeBundle(nil, {
		~synth = Synth(\connDemo);
		~connections.addAll(
			~controls.connectEach(\value, [
				~synth.argSlot(\amp),
				~synth.argSlot(\freq),
				~synth.argSlot(\delay),
				~synth.argSlot(\decay),
				~synth.argSlot(\filterFreq),
			]);
		);
	})
}
)
::

We could have been more succinct when connecting code::~synth:: arguments by using code::argsSlots::, which returns a collection of slots for a argument list of names.
code::
~controls.connectEach(\value, ~synth.argSlots(\amp, \freq, \delay, \decay, \filterFreq));
::

section::Connection modifiers
Connection has modifier methods that allow you to express useful ways of handling or modifying updates between objects.
Connection modifiers can be applied in three ways.

## They can be used as a method of objects returned by the .signal method.
CODE:: object.signal(\value).filter(...).connectTo(dependant) ::

## They can be used as a method modifying an existing connection.
CODE:: object.signal(\value).connectTo(dependant).filter(...) ::

## They can also be constructed as objects and connected in a chain with objects.
CODE:: object.signal(\value).connectTo(UpdateFilter(...)).connectTo(dependant); ::

subsection:: filter
Filter will only allow updates through that match either a specified code::\key::, or for which a function returns true:
code::
(
~object = Object();
~reporter = { |...args| "Message recieved: %".format(args).postln };

~object.connectTo(~reporter).filter(\allowed);
~object.connectTo(~reporter).filter({
	|obj, changed, value|
	(changed == \value) and: { value > 100 };
});

~object.changed(\allowed, "This update will arrive.");
~object.changed(\notallowed, "This update will not.");
~object.changed(\value, 10);
~object.changed(\value, 101);
)
::

subsection:: transform
Transform will use a provided function to modify the values being passed in an update.
The result of the function must be of the form: code::[object, changed, args]::, where code::args:: is an array.
Returning code::nil:: will not forward the update, effectively filtering it.
code::
(
~object = Object();
~reporter = { |...args| "Message recieved: %".format(args).postln };

~object.connectTo(~reporter).transform({
	|object, changed, value|
	switch(changed,
		\multiply, {
			[object, changed, [value * value]]
		},
		\add, {
			[object, changed, [value + value]]
		},
		nil
	);
});

~object.changed(\multiply, 9);
~object.changed(\add, 8);
~object.changed(\skipped, "Transform returns nil, so this is not forwarded.");
)
::

subsection:: defer
The equivalent to link::Classes/Function#defer:: - will defer updates for a specified amount of time, and/or to a different thread.
code::
(
~object = Object();
~reporter = { |...args| "Message recieved: %".format(args).postln };
~object.connectTo(~reporter).defer(3);
~object.changed(\thisWillArriveInThreeSeconds);
)
::

subsection:: collapse
This will collapse updates over a specified interval, effectively rate-limiting and ensuring only one update
(the most recent) is applied for a period of time.

code::
(
~object = Object();
~reporter = { |...args| "Update recieved at time %".format(thisThread.seconds).postln };
~object.connectTo(~reporter).collapse(1);
fork {
	10.do {
		~object.changed(\onePerSecond);
		0.25.wait;
	}
}
)
::

subsection:: oneShot
This will disconnect or free a connection after it is fired. Note that disconnected connections can be
reconnected (they will again auto-disconnect the next time they are fired). Free'd connections will
free resources and cannot be reconnected. Freeing one-shot connections is an effective way to avoid
holding on to these connections yourself.
code::
(
~object = Object();
~reporter = { |...args| "Message recieved: %".format(args).postln };

~autoDisconnecter = ~object.connectTo(~reporter).oneShot;
~object.changed(\thisIsTheOne);
~object.changed(\itsTooLate);
~autoDisconnecter.connect;
~object.changed(\oneMoreChance);

~autoFree = ~object.connectTo(~reporter).oneShot(true);
~object.changed(\afterThisWereFree);
~object.changed(\resourcesAreNowFreed);
)
::


section:: Debugging
Updates happening to connected objects can be traced using link::Classes/Connection#trace::.
Traces of connected items are shown with "â‹¯â‹¯". Traces of disconnected items are shown with "â‹°â‹°".
code::
(
~sliders = 10.collect { Slider () };
~window = View(bounds:400@200).layout_(HLayout(*~sliders)).front;

~connections = ConnectionList.makeWith {
	~sliders.do {
		|slider, i|
		slider.signal(\value).connectTo(
			~sliders.wrapAt(i + 1).valueSlot
		).defer(0.25);
	}
};

~connections[0].disconnect(); // first slider is disconnected

~connections.trace(true);

~window.onClose = { ~connections.trace(false); ~connections.disconnect; }
)
::

